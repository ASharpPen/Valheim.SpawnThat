<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <TargetFramework>net48</TargetFramework>
    <AllowUnsafeBlocks>True</AllowUnsafeBlocks>
    <AssemblyVersion></AssemblyVersion>
    <FileVersion></FileVersion>
    <Version>1.2.13</Version>
    <ProduceReferenceAssembly>True</ProduceReferenceAssembly>
    <AssemblyName>Valheim.SpawnThat</AssemblyName>
    <GeneratePackageOnBuild>True</GeneratePackageOnBuild>
    <Authors>A Sharp Pen</Authors>
    <PackageProjectUrl>https://asharppen.github.io/Valheim.SpawnThat/</PackageProjectUrl>
    <RepositoryUrl>https://github.com/ASharpPen/Valheim.SpawnThat</RepositoryUrl>
    <RepositoryType>git</RepositoryType>
    <PackageTags>Valheim;Mod;Spawn;BepInEx</PackageTags>
    <Description>Valheim mod and tool for configuring spawners.</Description>
    <PackageLicenseExpression>Unlicense</PackageLicenseExpression>
  </PropertyGroup>
  <ItemGroup>
	<PackageReference Include="Microsoft.Unity.Analyzers" Version="1.12.0">
	  <PrivateAssets>all</PrivateAssets>
	  <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
	</PackageReference>
    <PackageReference Include="YamlDotNet" Version="11.2.1" />
  </ItemGroup>
  <ItemGroup>
    <Reference Include="0Harmony">
      <HintPath>..\Libs\BepInEx\0Harmony.dll</HintPath>
    </Reference>
    <Reference Include="assembly_utils">
      <HintPath>..\Libs\Valheim\assembly_utils.dll</HintPath>
    </Reference>
    <Reference Include="assembly_valheim">
      <HintPath>..\Libs\Valheim\assembly_valheim.dll</HintPath>
    </Reference>
    <Reference Include="BepInEx">
      <HintPath>..\Libs\BepInEx\BepInEx.dll</HintPath>
    </Reference>
    <Reference Include="CreatureLevelControl">
      <HintPath>..\Libs\Smoothbrain-CreatureLevelAndLootControl\CreatureLevelControl.dll</HintPath> 
    </Reference>
    <Reference Include="EpicLoot">
      <HintPath>..\Libs\RandyKnapp-EpicLoot\EpicLoot.dll</HintPath>
    </Reference>
    <Reference Include="MobAILib">
      <HintPath>..\Libs\RagnarsRokare-MobAILib\MobAILib.dll</HintPath>
    </Reference>
    <Reference Include="SoftReferenceableAssets">
      <HintPath>..\Libs\Valheim\SoftReferenceableAssets.dll</HintPath>
    </Reference>
    <Reference Include="UnityEngine">
      <HintPath>..\Libs\Unity\UnityEngine.dll</HintPath>
    </Reference>
    <Reference Include="UnityEngine.CoreModule">
      <HintPath>..\Libs\Unity\UnityEngine.CoreModule.dll</HintPath>
    </Reference>
    <Reference Include="UnityEngine.ImageConversionModule">
      <HintPath>..\Libs\Unity\UnityEngine.ImageConversionModule.dll</HintPath>
    </Reference>
    <Reference Include="UnityEngine.PhysicsModule">
      <HintPath>..\Libs\Unity\UnityEngine.PhysicsModule.dll</HintPath>
    </Reference>
    <Reference Include="UnityEngine.UI">
      <HintPath>..\Libs\Unity\UnityEngine.UI.dll</HintPath>
    </Reference>
  </ItemGroup>

	<Target Name="PropagateVersionNumber" BeforeTargets="Build">

		<PropertyGroup>
			<RepoDir>$([System.IO.Path]::GetFullPath($([System.IO.Path]::Combine($(MSBuildProjectDirectory),'..','..'))))</RepoDir>
			<ThunderStoreDir>$([System.IO.Path]::Combine($(RepoDir),'Thunderstore'))</ThunderStoreDir>
			
			<Manifest>$([System.IO.Path]::Combine($(ThunderStoreDir),'manifest.json'))</Manifest>
			<PluginFile>$([System.IO.Path]::Combine($(MSBuildProjectDirectory),'SpawnThatPlugin.cs'))</PluginFile>
		</PropertyGroup>

		<Message Text="Replacing manifest version: $([System.Text.RegularExpressions.Regex]::Match($([System.IO.File]::ReadAllText($(Manifest))),'version_number&quot;.+')) with '$(Version)'" Importance="high" />
		
		<WriteLinesToFile File="$(Manifest)" Lines="$([System.Text.RegularExpressions.Regex]::Replace($([System.IO.File]::ReadAllText($(Manifest))),'version_number&quot;.+','version_number&quot;: &quot;$(Version)&quot;,'))" Overwrite="true" Encoding="UTF-8" />

		<Message Text="Replacing plugin version: $([System.Text.RegularExpressions.Regex]::Match($([System.IO.File]::ReadAllText($(PluginFile))),'Version\s?=\s?&quot;.+&quot;')) with '$(Version)'" Importance="high" />

		<WriteLinesToFile File="$(PluginFile)" Lines="$([System.Text.RegularExpressions.Regex]::Replace($([System.IO.File]::ReadAllText($(PluginFile))),'Version\s?=\s?&quot;.+&quot;','Version = &quot;$(Version)&quot;'))" Overwrite="true" Encoding="UTF-8" />

	</Target>

	<Target Name="PrepareReleaseArtifacts" AfterTargets="Pack" Condition="'$(Configuration)'=='Release'">

		<PropertyGroup>
			<OutputNugetDir>$([System.IO.Path]::GetFullPath($([System.IO.Path]::Combine($(OutputDir),'..'))))</OutputNugetDir>
			<RepoDir>$([System.IO.Path]::GetFullPath($([System.IO.Path]::Combine($(MSBuildProjectDirectory),'..','..'))))</RepoDir>
			<ThunderStoreDir>$([System.IO.Path]::Combine($(RepoDir),'Thunderstore'))</ThunderStoreDir>
			<ReleaseDir>$([System.IO.Path]::Combine($(ThunderstoreDir),'SpawnThat_v$(Version)'))</ReleaseDir>
			<BuildConfigurationDir>$([System.IO.Path]::Combine($(BaseOutputPath),$(Configuration)))</BuildConfigurationDir>
			
			<SpawnThatDll>$(OutputPath)$(AssemblyName).dll</SpawnThatDll>
			<NugetPkg>$([System.IO.Path]::Combine($(BaseOutputPath),$(Configuration),$(Assemblyname).$(Version).nupkg))</NugetPkg>
			<YamlDotNetDll>$(OutputPath)YamlDotNet.dll</YamlDotNetDll>
			<YamlDotNetLicense>$([System.IO.Path]::Combine($(ThunderStoreDir),'YamlDotNet.LICENSE.txt'))</YamlDotNetLicense>
			<Readme>$([System.IO.Path]::Combine($(RepoDir),'README.md'))</Readme>
			<Icon>$([System.IO.Path]::Combine($(ThunderStoreDir),'icon.png'))</Icon>
			<Manifest>$([System.IO.Path]::Combine($(ThunderStoreDir),'manifest.json'))</Manifest>
			<Changelog>$([System.IO.Path]::Combine($(RepoDir),CHANGELOG.md))</Changelog>
		</PropertyGroup>

		<Message Text="Preparing release '$(ReleaseDir)'" Importance="high" />

		<RemoveDir Directories="$(ReleaseDir)" />
		<MakeDir Directories="$(ReleaseDir)" />

		<Copy SourceFiles="$(SpawnThatDll);$(YamlDotNetDll);$(YamlDotnetLicense);$(Readme);$(Icon);$(Manifest);$(Changelog)" DestinationFolder="$(ReleaseDir)" />

		<ZipDirectory SourceDirectory="$(ReleaseDir)" Overwrite="true" DestinationFile="$([System.IO.Path]::Combine($(ThunderStoreDir),'SpawnThat_v$(Version).zip'))" />

		<Copy SourceFiles="$(NugetPkg)" DestinationFolder="$(ReleaseDir)" />

		<Move SourceFiles="$([System.IO.Path]::Combine($(ThunderStoreDir),'SpawnThat_v$(Version).zip'))" DestinationFiles="$([System.IO.Path]::Combine($(ReleaseDir),'SpawnThat_v$(Version).zip'))" />

		<Message Text="Copying changelogs to documentation." Importance="high" />

		<Copy SourceFiles="$(Changelog)" DestinationFiles="$([System.IO.Path]::Combine($(RepoDir),'src','SpawnThat.Docs',change-log.md))" />

	</Target>
</Project>
